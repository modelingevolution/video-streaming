@using ModelingEvolution.VideoStreaming.VectorGraphics
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@inject StreamingCanvasEngine _engine
@inject NavigationManager _nm
<SKCanvasView OnPaintSurface="OnPaintSurface"
              style="@Style"
              EnableRenderLoop="true" />

@code {
    private int[]? _filteredLayers = null;
    private Uri? _uri;
    private readonly PeriodicConsoleWriter _writer = new(TimeSpan.FromSeconds(30));
    private FpsWatch fps = new();

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public Resolution Resolution { get; set; } = Resolution.FullHd;

    

    [Parameter]
    public string? Url
    {
        get => _uri?.ToString();
        set
        {
            if (value == null) return;

            var v = value;
            if (v.StartsWith("http"))
                v = v.Replace("http", "ws");
            else if (!v.StartsWith("ws"))
                v = _nm.BaseUri.Replace("http", "ws") + v;
            _uri = new Uri(v);
        }
    }
    protected override void OnParametersSet()
    {
        var uri = new Uri(_nm.Uri);
        if (String.IsNullOrWhiteSpace(uri.Query)) return;

        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);
        string? filters = queryParameters["layers"];
        if (filters == null) return;
        try
        {
            var values = filters.Split(new[] { ',', ';' }).Select(int.Parse).ToArray();
            _filteredLayers = values;
            _engine.FilteredLayers = values;
        }
        catch (Exception ex)
        {
            Console.WriteLine("OnParametersSet: " + ex.Message);
            Console.WriteLine(ex.StackTrace);
        }

    }
    protected override async Task OnParametersSetAsync()
    {
        if (_engine.IsRunning)
        {
            if (_engine.Uri == _uri)
            {
                _engine.FilteredLayers = this._filteredLayers;
                return;
            }
            await _engine.StopAsync();
        }

        if (_uri != null)
            try
            {
                _engine.FilteredLayers = this._filteredLayers;
                await _engine.ConnectAsync(_uri);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Cannot connect to: {_uri}");
            }

    }

    private void OnPaintSurface(SKPaintSurfaceEventArgs obj)
    {
        try
        {
            float scaleX = (float)obj.Info.Width / Resolution.Width;
            float scaleY = (float)obj.Info.Height / Resolution.Height;
            float scale = Math.Min(scaleX, scaleY);
            obj.Surface.Canvas.Scale(scale);

            fps++;
            _engine.Render(obj.Surface.Canvas);
            _writer.WriteLine($"Render fps: {(int)fps.Value} in canvas: {obj.Info.Width}x{obj.Info.Height}, scale: {scale}x");
        }
        catch (Exception ex)
        {
            Console.WriteLine("OnPaintSurface: " + ex.Message);
            Console.WriteLine(ex.StackTrace);
        }
    }

}
