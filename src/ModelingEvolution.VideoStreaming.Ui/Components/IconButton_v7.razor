@namespace MudBlazor
@using MudBlazor.Utilities
@inherits MudBaseButton
@implements IHandleEvent

<MudElement @bind-Ref="@_elementReference"
            HtmlTag="@HtmlTag"
            Class="@Classname" 
            Style="@Style"
            @attributes="UserAttributes" 
            @onclick="OnClickHandler"
            type="@ButtonType.ToDescriptionString()" 
            href="@Href" 
            target="@Target"
            rel="@GetRel()"
            disabled="@GetDisabledState()"
            ClickPropagation="@ClickPropagation">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <span class="mud-icon-button-label">
            <MudIcon Icon="@Icon" Size="@Size" Style="@IconStyle" Class="@IconClass"/>
        </span>
    }
    else
    {
        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Inherit">@ChildContent</MudText>
    }
</MudElement>
@code{

    protected string Classname =>
            new CssBuilder("mud-button-root mud-icon-button")
                .AddClass("mud-button", when: AsButton)
                .AddClass($"mud-{Color.ToDescriptionString()}-text hover:mud-{Color.ToDescriptionString()}-hover", !AsButton && Color != MudBlazor.Color.Default)
                .AddClass($"mud-button-{Variant.ToDescriptionString()}", AsButton)
                .AddClass($"mud-button-{Variant.ToDescriptionString()}-{Color.ToDescriptionString()}", AsButton)
                .AddClass($"mud-button-{Variant.ToDescriptionString()}-size-{Size.ToDescriptionString()}", AsButton)
                .AddClass($"mud-icon-button-size-{Size.ToDescriptionString()}", when: () => Size != Size.Medium)
                .AddClass($"mud-icon-button-edge-{Edge.ToDescriptionString()}", when: () => Edge != Edge.False)

                .AddClass(Class)
                .Build();

    protected bool AsButton => Variant != Variant.Text;

    /// <summary>
    /// The Icon that will be used in the component.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Button.Behavior)]
    public string? Icon { get; set; }


    /// <summary>
    /// The Icon class that will be used in the component.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Button.Appearance)]
    public string? IconClass { get; set; }

    /// <summary>
    /// The Icon style that will be used in the component.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Button.Appearance)]
    public string? IconStyle { get; set; }

    /// <summary>
    /// The color of the component. It supports the theme colors.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Button.Appearance)]
    public MudBlazor.Color Color { get; set; } = MudBlazor.Color.Default;

    /// <summary>
    /// The Size of the component.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Button.Appearance)]
    public Size Size { get; set; } = Size.Medium;

    /// <summary>
    /// If set uses a negative margin.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Button.Appearance)]
    public Edge Edge { get; set; }

    /// <summary>
    /// The variant to use.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Button.Appearance)]
    public Variant Variant { get; set; } = Variant.Text;

    /// <summary>
    /// Child content of component, only shows if Icon is null or Empty.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Button.Behavior)]
    public RenderFragment? ChildContent { get; set; }

    /// <inheritdoc/>
    /// <remarks>
    /// See: https://github.com/MudBlazor/MudBlazor/issues/8365
    /// <para/>
    /// Since <see cref="MudIconButton"/> implements only single <see cref="EventCallback"/> <see cref="MudBaseButton.OnClick"/> this is safe to disable globally within the component.
    /// </remarks>
    Task IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object? arg) => callback.InvokeAsync(arg);

}