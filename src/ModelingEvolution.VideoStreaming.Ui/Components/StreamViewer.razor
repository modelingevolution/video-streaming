@using ModelingEvolution.Controls.Blazor
@using ModelingEvolution.Controls.Blazor.AnchorPanelControl
@using ModelingEvolution.VideoStreaming.VectorPlayer.Components

@inject VideoStreamingServer _srv


@if (_address.VideoTransport == VideoTransport.Tcp)
{
    <BroadwayPlayer @rendermode="InteractiveServer" 
                    Src="@WsUrl()" Width="1920" Height="1080" Style="float: left; position: relative;"></BroadwayPlayer>
} 
else 
{
    <AnchorPanel Id="player-1" Style="@Style">
        <Dock>
            <img src="@MjpegUrl()" alt="MJPEG LIVE STREAM" class="anchor-dock" style="@ImgStyleComputed" />
            @* <img src="_content/ModelingEvolution.VideoStreaming.Ui/CameraPreviewImg.png" 
                 class="anchor-dock" /> *@
            <CanvasPlayer Style="@CanvasStyle" Url="@VectorUrl()"></CanvasPlayer>

            @ChildContent
        </Dock>
        <Anchors>
            <AnchorUpperRight>
                <MudStack Row="true">
                    @UpperRightButtons
                    <RecordingButton Address="@_address" @rendermode="InteractiveServer"/>
                    <SwitchCameraButton Address="@_address" @rendermode="InteractiveServer"/>
                </MudStack>
            </AnchorUpperRight>
            <AnchorLowerRight>
                @if (IsFullScreenIconVisible) {
                    <FullScreenButton ControlId="player-1" @rendermode="InteractiveServer" />
                }
            </AnchorLowerRight>
        </Anchors>
    </AnchorPanel>
}
@code {
    private string _imgStyle= "width:100%;";
    private string _imgStyleFinal;
    private string ImgStyleComputed => _imgStyleFinal ?? _imgStyle;
    private string CanvasStyle => ImgStyleComputed + "position:absolute; top:0;left:0;height:100%";

    [Parameter]
    public bool IsFullScreenIconVisible { get; set; } = true;

    [Parameter]
    public string? Stream
    {
        get => _stream;
        set
        {
            _stream = value;
            var rpl =  _srv.GetReplicator(Stream);
            if (rpl == null) return;
            _address = rpl.VideoAddress;
        }
    }

    [Parameter]
    public RenderFragment UpperRightButtons { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? ImgStyle
    {
        get => _imgStyle1;
        set
        {
            _imgStyle1 = value;
            if (value != null)
            {
                _imgStyleFinal = _imgStyle + value;
            }
        }
    }


    private VideoAddress _address;
    private string? _imgStyle1;
    private string? _stream;

    private string WsUrl() => $"/ws/{Stream}";
    private string MjpegUrl() => StreamUrls.GetStreamUrlPath(Stream);
    private string VectorUrl() => StreamUrls.GetVectorStreamUrlPath(Stream);

}
